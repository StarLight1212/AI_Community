def selection_sort(arr):
    """
    选择排序函数
    :param arr: 待排序的列表
    :return: 排序后的列表
    +---------------------+
    |   开始              |
    +---------------------+
              |
              v
    +---------------------+
    |   输入待排序列表    |
    +---------------------+
              |
              v
    +---------------------+
    |   获取列表长度 n   |
    +---------------------+
              |
              v
    +---------------------+
    |   外层循环 i 从 0 到 n-1 |
    +---------------------+
              |
              v
    +---------------------+
    |   假设 min_index = i |
    +---------------------+
              |
              v
    +---------------------+
    |   内层循环 j 从 i+1 到 n-1 |
    +---------------------+
              |
              v
    +---------------------+
    |   如果 arr[j] < arr[min_index] |
    |       更新 min_index |
    +---------------------+
              |
              v
    +---------------------+
    |   交换 arr[i] 和 arr[min_index] |
    +---------------------+
              |
              v
    +---------------------+
    |   返回排序后的列表  |
    +---------------------+
              |
              v
    +---------------------+
    |   结束              |
    +---------------------+
    """
    n = len(arr)  # 获取列表的长度
    # 外层循环控制每一轮选择
    for i in range(n):
        min_index = i  # 假设当前索引为最小值索引
        # 内层循环寻找最小值的索引
        for j in range(i + 1, n):
            # 如果找到更小的值，更新最小值索引
            if arr[j] < arr[min_index]:
                min_index = j
        # 交换当前索引和找到的最小值索引的元素
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr  # 返回排序后的列表

# 测试选择排序
if __name__ == "__main__":
    sample_list = [64, 25, 12, 22, 11]  # 待排序的列表
    print("原始列表:", sample_list)
    sorted_list = selection_sort(sample_list)  # 调用选择排序函数
    print("排序后的列表:", sorted_list)
