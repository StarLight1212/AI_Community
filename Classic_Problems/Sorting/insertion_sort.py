def insertion_sort(arr):
    """
    插入排序函数
    :param arr: 待排序的列表
    :return: 排序后的列表
    +---------------------+
    |   开始              |
    +---------------------+
              |
              v
    +---------------------+
    |   输入待排序列表    |
    +---------------------+
              |
              v
    +---------------------+
    |   获取列表长度 n   |
    +---------------------+
              |
              v
    +---------------------+
    |   外层循环 i 从 1 到 n-1 |
    +---------------------+
              |
              v
    +---------------------+
    |   key = arr[i]     |
    +---------------------+
              |
              v
    +---------------------+
    |   j = i - 1        |
    +---------------------+
              |
              v
    +---------------------+
    |   内层循环:        |
    |   while j >= 0 and arr[j] > key |
    +---------------------+
              |
              v
    +---------------------+
    |   arr[j + 1] = arr[j]  |
    |   j -= 1              |
    +---------------------+
              |
              v
    +---------------------+
    |   arr[j + 1] = key   |
    +---------------------+
              |
              v
    +---------------------+
    |   返回排序后的列表  |
    +---------------------+
              |
              v
    +---------------------+
    |   结束              |
    +---------------------+
    """
    n = len(arr)  # 获取列表的长度
    # 从第二个元素开始，逐个插入到已排序的部分
    for i in range(1, n):
        key = arr[i]  # 当前要插入的元素
        j = i - 1  # 已排序部分的最后一个元素索引
        # 将大于key的元素向后移动
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]  # 移动元素
            j -= 1  # 移动到下一个元素
        arr[j + 1] = key  # 插入当前元素
    return arr  # 返回排序后的列表

# 测试插入排序
if __name__ == "__main__":
    sample_list = [12, 11, 13, 5, 6]  # 待排序的列表
    print("原始列表:", sample_list)
    sorted_list = insertion_sort(sample_list)  # 调用插入排序函数
    print("排序后的列表:", sorted_list)
